{
  parserClass="com.kevinthegreat.fpp.parser.FPPParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="FPP"
  psiImplClassSuffix="Impl"
  psiPackage="com.kevinthegreat.fpp.psi"
  psiImplPackage="com.kevinthegreat.fpp.psi.impl"

  elementTypeHolderClass="com.kevinthegreat.fpp.psi.FPPTypes"
  elementTypeClass="com.kevinthegreat.fpp.psi.FPPElementType"
  tokenTypeClass="com.kevinthegreat.fpp.psi.FPPTokenType"

  tokens=[
    // 3.1. Reserved Words
    F32="F32"
    F64="F64"
    I16="I16"
    I32="I32"
    I64="I64"
    I8="I8"
    U16="U16"
    U32="U32"
    U64="U64"
    U8="U8"
    ACTION="action"
    ACTIVE="active"
    ACTIVITY="activity"
    ALWAYS="always"
    ARRAY="array"
    ASSERT="assert"
    ASYNC="async"
    AT="at"
    BASE="base"
    BLOCK="block"
    BOOL="bool"
    CHANGE="change"
    CHOICE="choice"
    COMMAND="command"
    COMPONENT="component"
    CONNECTIONS="connections"
    CONSTANT="constant"
    CONTAINER="container"
    CPU="cpu"
    DEFAULT="default"
    DIAGNOSTIC="diagnostic"
    DO="do"
    DROP="drop"
    ELSE="else"
    ENTER="enter"
    ENTRY="entry"
    ENUM="enum"
    EVENT="event"
    EXIT="exit"
    EXTERNAL="external"
    FALSE="false"
    FATAL="fatal"
    FORMAT="format"
    GET="get"
    GROUP="group"
    GUARD="guard"
    GUARDED="guarded"
    HEALTH="health"
    HIGH="high"
    HOOK="hook"
    ID="id"
    IF="if"
    IMPORT="import"
    INCLUDE="include"
    INITIAL="initial"
    INPUT="input"
    INSTANCE="instance"
    INTERFACE="interface"
    INTERNAL="internal"
    LOCATE="locate"
    LOW="low"
    MACHINE="machine"
    MATCH="match"
    MODULE="module"
    OMIT="omit"
    ON="on"
    OPCODE="opcode"
    ORANGE="orange"
    OUTPUT="output"
    PACKET="packet"
    PACKETS="packets"
    PARAM="param"
    PASSIVE="passive"
    PHASE="phase"
    PORT="port"
    PRIORITY="priority"
    PRIVATE="private"
    PRODUCT="product"
    QUEUE="queue"
    QUEUED="queued"
    RECORD="record"
    RECV="recv"
    RED="red"
    REF="ref"
    REG="reg"
    REQUEST="request"
    RESP="resp"
    SAVE="save"
    SEND="send"
    SERIAL="serial"
    SET="set"
    SEVERITY="severity"
    SIGNAL="signal"
    SIZE="size"
    STACK="stack"
    STATE="state"
    STRING="string"
    STRUCT="struct"
    SYNC="sync"
    TELEMETRY="telemetry"
    TEXT="text"
    THROTTLE="throttle"
    TIME="time"
    TOPOLOGY="topology"
    TRUE="true"
    TYPE="type"
    UNMATCHED="unmatched"
    UPDATE="update"
    WARNING="warning"
    WITH="with"
    YELLOW="yellow"

    LEFT_PAREN='('
    RIGHT_PAREN=')'
    MUL='*'
    ADD='+'
    COMMA=','
    SUB='-'
    ARROW='->'
    DOT='.'
    DIV='/'
    COLON=':'
    SEMICOLON=';'
    ASSIGN='='
    LEFT_BRACKET='['
    RIGHT_BRACKET=']'
    LEFT_BRACE='{'
    RIGHT_BRACE='}'

    // 3.3. Identifiers
    IDENTIFIER="regexp:[$a-zA-Z_]\w*"
    // 3.4. End-of-Line Tokens
    END_OF_LINE="regexp:(\r?\n)+"
    // 3.5. Comments
    COMMENT="regexp:#[^\r\n]*"
    // 13.2. Annotations
    PRE_ANNOTATION="regexp:@[^\r\n]*"
    POST_ANNOTATION="regexp:@<[^\r\n]*"
    WHITESPACE="regexp: +"

    // 10.6. Floating-Point Literals
    FLOATING_POINT_LITERAL
    // 10.8. Integer Literals
    INTEGER_LITERAL
    // 10.10. String Literals
    STRING_LITERAL
  ]
}

// 14.1. Translation Units
fpp_file ::= translation_unit

// 5. Definitions
// 5.1. Abstract Type Definitions
abstract_type_definition ::= TYPE IDENTIFIER
// 5.2. Alias Type Definitions
alias_type_definition ::= TYPE IDENTIFIER ASSIGN type_name
// 5.3. Array Definitions
array_definition ::= ARRAY IDENTIFIER ASSIGN LEFT_BRACKET expression RIGHT_BRACKET type_name [ DEFAULT expression ] [ FORMAT STRING_LITERAL ]
// 5.4. Component Definitions
component_definition ::= component_kind COMPONENT IDENTIFIER LEFT_BRACE component_member_sequence RIGHT_BRACE
component_kind ::= ACTIVE | PASSIVE | QUEUED
component_member_sequence ::= (component_member (SEMICOLON | END_OF_LINE)*)*
component_member ::= constant_definition
                  | state_machine_definition
                  | struct_definition
                  | command_specifier
                  | container_specifier
                  | parameter_specifier
                  | port_instance_specifier
                  | port_matching_specifier
                  | record_specifier
                  | state_machine_instance_specifier
                  | telemetry_channel_specifier
                  | abstract_type_definition
                  | alias_type_definition
                  | array_definition
                  | enum_definition
                  | event_specifier
                  | include_specifier
                  | internal_port_specifier
                  | interface_import_specifier
// 5.5. Component Instance Definitions
component_instance_definition ::= INSTANCE IDENTIFIER COLON qualified_identifier BASE ID expression [ TYPE STRING_LITERAL ] [ AT STRING_LITERAL ] [ QUEUE SIZE expression ] [ STACK SIZE expression ] [ PRIORITY expression ] [ CPU expression ] [ LEFT_BRACE init_specifier_sequence RIGHT_BRACE ]
init_specifier_sequence ::= (init_specifier (SEMICOLON | END_OF_LINE)*)*
// 5.6. Constant Definitions
constant_definition ::= CONSTANT IDENTIFIER ASSIGN expression
// 5.7. Enum Definitions
enum_definition ::= ENUM IDENTIFIER [ COLON type_name ] LEFT_BRACE enum_constant_sequence RIGHT_BRACE [ DEFAULT expression ]
enum_constant_sequence ::= (enum_constant (COMMA | END_OF_LINE)*)*
// 5.8. Enumerated Constant Definitions
enum_constant ::= IDENTIFIER [ ASSIGN expression ]
// 5.9. Module Definitions
module_definition ::= MODULE IDENTIFIER LEFT_BRACE module_member_sequence RIGHT_BRACE
module_member_sequence ::= (module_member (SEMICOLON | END_OF_LINE)*)*
module_member ::= component_definition
                 | component_instance_definition
                 | constant_definition
                 | module_definition
                 | port_definition
                 | port_interface_definition
                 | state_machine_definition
                 | struct_definition
                 | topology_definition
                 | location_specifier
                 | abstract_type_definition
                 | alias_type_definition
                 | array_definition
                 | enum_definition
                 | include_specifier
// 5.10. Port Definitions
port_definition ::= PORT IDENTIFIER [ LEFT_PAREN param_list RIGHT_PAREN ] [ ARROW type_name ]
// 5.11. Port Interface Definitions
port_interface_definition ::= INTERFACE IDENTIFIER LEFT_BRACE port_interface_member_sequence RIGHT_BRACE
port_interface_member_sequence ::= (port_interface_member (SEMICOLON | END_OF_LINE)*)*
port_interface_member ::= port_instance_specifier
                        | interface_import_specifier
// 5.12. State Machine Definitions
state_machine_definition ::= STATE MACHINE IDENTIFIER [ LEFT_BRACE state_machine_member_sequence RIGHT_BRACE ]
state_machine_member_sequence ::= (state_machine_member (SEMICOLON | END_OF_LINE)*)*
state_machine_member ::= choice_definition
                        | guard_definition
                        | initial_transition_specifier
                        | signal_definition
                        | state_definition
                        | action_definition
// 5.13. Struct Definitions
struct_definition ::= STRUCT IDENTIFIER LEFT_BRACE struct_type_member_sequence RIGHT_BRACE [ DEFAULT expression ]
struct_type_member_sequence ::= (struct_type_member (COMMA | END_OF_LINE)*)*
struct_type_member ::= IDENTIFIER COLON [ LEFT_BRACKET expression RIGHT_BRACKET ] type_name [ FORMAT STRING_LITERAL ]
// 5.14. Topology Definitions
topology_definition ::= TOPOLOGY IDENTIFIER LEFT_BRACE topology_member_sequence RIGHT_BRACE
topology_member_sequence ::= (topology_member (SEMICOLON | END_OF_LINE)*)*
topology_member ::= component_instance_specifier
                    | connection_graph_specifier
                    | telemetry_packet_set_specifier
                    | topology_import_specifier
                    | include_specifier

// 6. State Machine Behavior Elements
// 6.1. Action Definitions
action_definition ::= ACTION IDENTIFIER [ COLON type_name ]
// 6.2. Choice Definitions
choice_definition ::= CHOICE IDENTIFIER LEFT_BRACE IF IDENTIFIER transition_expression ELSE transition_expression RIGHT_BRACE
// 6.3. Do Expressions
do_expression ::= DO LEFT_BRACE action_sequence RIGHT_BRACE
action_sequence ::= (IDENTIFIER (COMMA | END_OF_LINE)*)*
// 6.4. Guard Definitions
guard_definition ::= GUARD IDENTIFIER [ COLON type_name ]
// 6.5. Initial Transition Specifiers
initial_transition_specifier ::= INITIAL transition_expression
// 6.6. Signal Definitions
signal_definition ::= SIGNAL IDENTIFIER [ COLON type_name ]
// 6.7. State Definitions
state_definition ::= STATE IDENTIFIER [ LEFT_BRACE state_definition_member_sequence RIGHT_BRACE ]
state_definition_member_sequence ::= (state_definition_member (SEMICOLON | END_OF_LINE)*)*
state_definition_member ::= initial_transition_specifier
                        | choice_definition
                        | state_definition
                        | state_transition_specifier
                        | state_entry_specifier
                        | state_exit_specifier
// 6.8. State Entry Specifiers
state_entry_specifier ::= ENTRY do_expression
// 6.9. State Exit Specifiers
state_exit_specifier ::= EXIT do_expression
// 6.10. State Transition Specifiers
state_transition_specifier ::= ON IDENTIFIER [ IF IDENTIFIER ] transition_or_do
transition_or_do ::= transition_expression
                    | do_expression
// 6.11. Transition Expressions
transition_expression ::= [ do_expression ] ENTER qualified_identifier

// 7. Specifiers
// 7.1. Command Specifiers
command_specifier ::= command_kind COMMAND IDENTIFIER [ LEFT_PAREN param_list RIGHT_PAREN ] [ OPCODE expression ] [ PRIORITY expression ] [ queue_full_behavior ]
command_kind ::= ASYNC | GUARDED | SYNC
// 7.2. Component Instance Specifiers
component_instance_specifier ::= [ PRIVATE ] INSTANCE qualified_identifier
// 7.3. Connection Graph Specifiers
connection_graph_specifier ::= direct_graph_specifier
                                | pattern_graph_specifier
direct_graph_specifier ::= CONNECTIONS IDENTIFIER LEFT_BRACE connection_sequence RIGHT_BRACE
connection_sequence ::= (connection (COMMA | END_OF_LINE)*)*
connection ::= [ UNMATCHED ] port_instance_identifier [ LEFT_BRACKET expression RIGHT_BRACKET ] ARROW port_instance_identifier [ LEFT_BRACKET expression RIGHT_BRACKET ]
pattern_graph_specifier ::= pattern_kind CONNECTIONS INSTANCE qualified_identifier [ LEFT_BRACE instance_sequence RIGHT_BRACE ]
pattern_kind ::= COMMAND
                | EVENT
                | HEALTH
                | PARAM
                | TELEMETRY
                | TEXT EVENT
                | TIME
instance_sequence ::= (qualified_identifier (COMMA | END_OF_LINE)*)*
// 7.4. Container Specifiers
container_specifier ::= PRODUCT IDENTIFIER [ ID expression ] [ DEFAULT PRIORITY expression ]
// 7.5. Event Specifiers
event_specifier ::= EVENT IDENTIFIER [ LEFT_PAREN param_list RIGHT_PAREN ] SEVERITY event_severity [ ID expression ] FORMAT STRING_LITERAL [ THROTTLE expression ]
event_severity ::= ACTIVITY HIGH
            | ACTIVITY LOW
            | COMMAND
            | DIAGNOSTIC
            | FATAL
            | WARNING HIGH
            | WARNING LOW
// 7.6. Include Specifiers
include_specifier ::= INCLUDE STRING_LITERAL
// 7.7. Init Specifiers
init_specifier ::= PHASE expression STRING_LITERAL
// 7.8. Interface Import Specifiers
interface_import_specifier ::= IMPORT qualified_identifier
// 7.9. Internal Port Specifiers
internal_port_specifier ::= INTERNAL PORT IDENTIFIER [ LEFT_PAREN param_list RIGHT_PAREN ] [ PRIORITY expression ] [ queue_full_behavior ]
// 7.10. Location Specifiers
location_specifier ::= component_instance_location_specifier
                        | component_location_specifier
                        | constant_location_specifier
                        | port_location_specifier
                        | state_machine_location_specifier
                        | topology_location_specifier
                        | type_location_specifier
component_instance_location_specifier ::= LOCATE INSTANCE qualified_identifier AT STRING_LITERAL
component_location_specifier ::= LOCATE COMPONENT qualified_identifier AT STRING_LITERAL
constant_location_specifier ::= LOCATE CONSTANT qualified_identifier AT STRING_LITERAL
port_location_specifier ::= LOCATE PORT qualified_identifier AT STRING_LITERAL
state_machine_location_specifier ::= LOCATE STATE MACHINE qualified_identifier AT STRING_LITERAL
topology_location_specifier ::= LOCATE TOPOLOGY qualified_identifier AT STRING_LITERAL
type_location_specifier ::= LOCATE TYPE qualified_identifier AT STRING_LITERAL
// 7.11. Parameter Specifiers
parameter_specifier ::= [ EXTERNAL ] PARAM IDENTIFIER COLON type_name [ DEFAULT expression ] [ ID expression ] [ SET OPCODE expression ] [ SAVE OPCODE expression ]
// 7.12. Port Instance Specifiers
port_instance_specifier ::= general_port_kind PORT IDENTIFIER COLON [ LEFT_BRACKET expression RIGHT_BRACKET ] port_instance_type [ PRIORITY expression ] [ queue_full_behavior ]
                            | [ special_port_input_kind ] special_port_kind PORT IDENTIFIER [ PRIORITY expression ] [ queue_full_behavior ]
general_port_kind ::= ASYNC INPUT
                        | GUARDED INPUT
                        | OUTPUT
                        | SYNC INPUT
port_instance_type ::= qualified_identifier
                        | SERIAL
queue_full_behavior ::= ASSERT | BLOCK | DROP | HOOK
special_port_input_kind ::= ASYNC | GUARDED | SYNC
special_port_kind ::= COMMAND RECV
                        | COMMAND REG
                        | COMMAND RESP
                        | EVENT
                        | PARAM GET
                        | PARAM SET
                        | PRODUCT GET
                        | PRODUCT RECV
                        | PRODUCT REQUEST
                        | PRODUCT SEND
                        | TELEMETRY
                        | TEXT EVENT
                        | TIME GET
// 7.13. Port Matching Specifiers
port_matching_specifier ::= MATCH IDENTIFIER WITH IDENTIFIER
// 7.14. Record Specifiers
record_specifier ::= PRODUCT RECORD IDENTIFIER COLON type_name [ ARRAY ] [ ID expression ]
// 7.15. State Machine Instance Specifiers
state_machine_instance_specifier ::= STATE MACHINE INSTANCE IDENTIFIER COLON qualified_identifier [ PRIORITY expression ] [ queue_full_behavior ]
// 7.16. Telemetry Channel Specifiers
telemetry_channel_specifier ::= TELEMETRY IDENTIFIER COLON type_name [ ID expression ] [ UPDATE telemetry_update ] [ FORMAT STRING_LITERAL ] [ LOW LEFT_BRACE telemetry_limit_sequence RIGHT_BRACE ] [ HIGH LEFT_BRACE telemetry_limit_sequence RIGHT_BRACE ]
telemetry_update ::= ALWAYS | ON CHANGE
telemetry_limit_sequence ::= (telemetry_limit (COMMA | END_OF_LINE)*)*
telemetry_limit ::= RED expression
                    | ORANGE expression
                    | YELLOW expression
// 7.17. Telemetry Packet Set Specifiers
telemetry_packet_set_specifier ::= TELEMETRY PACKETS IDENTIFIER LEFT_BRACE telemetry_packet_group_member_sequence RIGHT_BRACE [ OMIT LEFT_BRACE telemetry_channel_identifier_sequence RIGHT_BRACE ]
telemetry_packet_group_member_sequence ::= (telemetry_packet_group_member (COMMA | END_OF_LINE)*)*
telemetry_packet_group_member ::= include_specifier
                                | telemetry_packet_specifier
telemetry_channel_identifier_sequence ::= (telemetry_channel_identifier (COMMA | END_OF_LINE)*)*
// 7.18. Telemetry Packet Specifiers
telemetry_packet_specifier ::= PACKET IDENTIFIER [ ID expression ] GROUP expression LEFT_BRACE telemetry_packet_member_sequence RIGHT_BRACE
telemetry_packet_member_sequence ::= (telemetry_packet_member (COMMA | END_OF_LINE)*)*
telemetry_packet_member ::= non_annotatable_include_specifier
                            | telemetry_channel_identifier
non_annotatable_include_specifier ::= include_specifier
// 7.19. Topology Import Specifiers
topology_import_specifier ::= IMPORT qualified_identifier

// 8.1. Port Instance Identifiers
port_instance_identifier ::= IDENTIFIER (DOT IDENTIFIER)+
// 8.2. Telemetry Channel Identifiers
telemetry_channel_identifier ::= IDENTIFIER (DOT IDENTIFIER)+

// 9. Type Names
type_name ::= primitive_integer_type_name
              | floating_point_type_name
              | BOOL
              | string_type_name
              | qualified_identifier_type_name
primitive_integer_type_name ::= U8 | U16 | U32 | U64 | I8 | I16 | I32 | I64
floating_point_type_name ::= F32 | F64
string_type_name ::= STRING [ SIZE expression ]
qualified_identifier_type_name ::= qualified_identifier

// 10. Expressions
expression ::= arithmetic_expression
// 10.1. Arithmetic Expressions
arithmetic_expression ::= arithmetic_expression_multiplicative ( ( ADD | SUB ) arithmetic_expression_multiplicative )*
arithmetic_expression_multiplicative ::= arithmetic_expression_unary ( ( MUL | DIV ) arithmetic_expression_unary )*
arithmetic_expression_unary ::= SUB arithmetic_expression_unary
                                | expression_postfix
// 10. Expressions
expression_postfix ::= expression_primary expression_postfix_operations*
expression_postfix_operations ::= expression LEFT_BRACKET expression RIGHT_BRACKET // 10.3. Array Subscript Expressions
                                | expression DOT IDENTIFIER // 10.5. Dot Expressions
expression_primary ::= array_expression
                    | boolean_literal // 10.4. Boolean Literals
                    | FLOATING_POINT_LITERAL // 10.6. Floating-Point Literals
                    | qualified_identifier // 10.7. Identifier Expressions
                    | INTEGER_LITERAL // 10.8. Integer Literals
                    | LEFT_PAREN expression RIGHT_PAREN // 10.9. Parenthesis Expressions
                    | STRING_LITERAL // 10.10. String Literals
                    | struct_expression
// 10.2. Array Expressions
array_expression ::= LEFT_BRACKET array_element_sequence RIGHT_BRACKET
array_element_sequence ::= (expression (COMMA | END_OF_LINE)*)*
// 10.4. Boolean Literals
boolean_literal ::= TRUE | FALSE
// 10.11. Struct Expressions
struct_expression ::= LEFT_BRACE struct_element_sequence RIGHT_BRACE
struct_element_sequence ::= (struct_element (COMMA | END_OF_LINE)*)*
struct_element ::= IDENTIFIER ASSIGN expression

// 11. Formal Parameter Lists
param_list ::= (formal_parameter (COMMA | END_OF_LINE)*)*
formal_parameter ::= [ REF ] IDENTIFIER COLON type_name

// 14.1. Translation Units
translation_unit ::= (translation_unit_member (SEMICOLON | END_OF_LINE)*)*
translation_unit_member ::= module_member

// 15.1. Qualified Identifiers
qualified_identifier ::= IDENTIFIER (DOT IDENTIFIER)*
