// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/com/kevinthegreat/fpp/FPPLexer.flex

package com.kevinthegreat.fpp;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;import com.intellij.psi.tree.IElementType;
import static com.kevinthegreat.fpp.psi.FPPTypes.*;


public final class FPPLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT_STATE = 2;
  public static final int AFTER_EOL_SUPPRESSOR = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\2\1\3\22\0\1\4\2\0\1\5"+
    "\1\6\3\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\17"+
    "\1\24\1\17\1\25\1\17\1\26\1\27\1\30\1\31"+
    "\1\32\1\0\1\33\5\34\1\35\2\34\1\36\13\34"+
    "\1\37\5\34\1\40\1\41\1\42\1\0\1\34\1\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\34\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\0\1\75\7\0\1\2\44\0"+
    "\1\17\12\0\1\17\4\0\1\17\5\0\27\17\1\0"+
    "\37\17\1\0\u01ca\17\4\0\14\17\16\0\5\17\7\0"+
    "\1\17\1\0\1\17\21\0\165\17\1\0\2\17\2\0"+
    "\4\17\1\0\1\17\6\0\1\17\1\0\3\17\1\0"+
    "\1\17\1\0\24\17\1\0\123\17\1\0\213\17\1\0"+
    "\255\17\1\0\46\17\2\0\1\17\6\0\51\17\10\0"+
    "\55\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0"+
    "\1\17\10\0\33\17\4\0\4\17\35\0\13\17\5\0"+
    "\112\17\4\0\146\17\1\0\10\17\2\0\12\17\1\0"+
    "\23\17\2\0\1\17\20\0\73\17\2\0\145\17\16\0"+
    "\66\17\4\0\1\17\2\0\1\17\2\0\56\17\22\0"+
    "\34\17\4\0\13\17\65\0\25\17\1\0\10\17\25\0"+
    "\17\17\1\0\201\17\2\0\12\17\1\0\23\17\1\0"+
    "\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\1\17\3\0\4\17\2\0\11\17\2\0\2\17\2\0"+
    "\4\17\10\0\1\17\4\0\2\17\1\0\5\17\2\0"+
    "\14\17\12\0\1\17\1\0\1\17\2\0\3\17\1\0"+
    "\6\17\4\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\2\17\1\0\2\17\2\0\1\17\1\0"+
    "\5\17\4\0\2\17\2\0\3\17\3\0\1\17\7\0"+
    "\4\17\1\0\1\17\7\0\20\17\13\0\3\17\1\0"+
    "\11\17\1\0\3\17\1\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\5\17\2\0\12\17\1\0\3\17\1\0"+
    "\3\17\2\0\1\17\17\0\4\17\2\0\12\17\11\0"+
    "\7\17\1\0\3\17\1\0\10\17\2\0\2\17\2\0"+
    "\26\17\1\0\7\17\1\0\2\17\1\0\5\17\2\0"+
    "\11\17\2\0\2\17\2\0\3\17\10\0\2\17\4\0"+
    "\2\17\1\0\5\17\2\0\12\17\1\0\1\17\20\0"+
    "\2\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0"+
    "\2\17\1\0\1\17\1\0\2\17\3\0\2\17\3\0"+
    "\3\17\3\0\14\17\4\0\5\17\3\0\3\17\1\0"+
    "\4\17\2\0\1\17\6\0\1\17\16\0\12\17\20\0"+
    "\15\17\1\0\3\17\1\0\27\17\1\0\20\17\3\0"+
    "\10\17\1\0\3\17\1\0\4\17\7\0\2\17\1\0"+
    "\3\17\5\0\4\17\2\0\12\17\20\0\4\17\1\0"+
    "\10\17\1\0\3\17\1\0\27\17\1\0\12\17\1\0"+
    "\5\17\2\0\11\17\1\0\3\17\1\0\4\17\7\0"+
    "\2\17\7\0\1\17\1\0\4\17\2\0\12\17\1\0"+
    "\2\17\15\0\4\17\1\0\10\17\1\0\3\17\1\0"+
    "\63\17\1\0\3\17\1\0\5\17\5\0\4\17\7\0"+
    "\5\17\2\0\12\17\12\0\6\17\2\0\2\17\1\0"+
    "\22\17\3\0\30\17\1\0\11\17\1\0\1\17\2\0"+
    "\7\17\3\0\1\17\4\0\6\17\1\0\1\17\1\0"+
    "\10\17\6\0\12\17\2\0\2\17\15\0\72\17\5\0"+
    "\17\17\1\0\12\17\47\0\2\17\1\0\1\17\1\0"+
    "\5\17\1\0\30\17\1\0\1\17\1\0\27\17\2\0"+
    "\5\17\1\0\1\17\1\0\6\17\2\0\12\17\2\0"+
    "\4\17\40\0\1\17\27\0\2\17\6\0\12\17\13\0"+
    "\1\17\1\0\1\17\1\0\1\17\4\0\12\17\1\0"+
    "\44\17\4\0\24\17\1\0\22\17\1\0\44\17\11\0"+
    "\1\17\71\0\112\17\6\0\116\17\2\0\46\17\1\0"+
    "\1\17\5\0\1\17\2\0\53\17\1\0\115\17\1\0"+
    "\4\17\2\0\7\17\1\0\1\17\1\0\4\17\2\0"+
    "\51\17\1\0\4\17\2\0\41\17\1\0\4\17\2\0"+
    "\7\17\1\0\1\17\1\0\4\17\2\0\17\17\1\0"+
    "\71\17\1\0\4\17\2\0\103\17\2\0\3\17\40\0"+
    "\20\17\20\0\126\17\2\0\6\17\3\0\u016c\17\2\0"+
    "\21\17\1\0\32\17\5\0\113\17\3\0\13\17\7\0"+
    "\15\17\1\0\7\17\13\0\25\17\13\0\24\17\14\0"+
    "\15\17\1\0\3\17\1\0\2\17\14\0\124\17\3\0"+
    "\1\17\4\0\2\17\2\0\12\17\41\0\3\17\2\0"+
    "\12\17\6\0\131\17\7\0\53\17\5\0\106\17\12\0"+
    "\37\17\1\0\14\17\4\0\14\17\12\0\50\17\2\0"+
    "\5\17\13\0\54\17\4\0\32\17\6\0\12\17\46\0"+
    "\34\17\4\0\77\17\1\0\35\17\2\0\13\17\6\0"+
    "\12\17\15\0\1\17\10\0\17\17\101\0\114\17\4\0"+
    "\12\17\21\0\11\17\14\0\164\17\14\0\70\17\10\0"+
    "\12\17\3\0\61\17\2\0\11\17\7\0\53\17\2\0"+
    "\3\17\20\0\3\17\1\0\47\17\5\0\372\17\1\0"+
    "\33\17\2\0\6\17\2\0\46\17\2\0\6\17\2\0"+
    "\10\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\37\17\2\0\65\17\1\0\7\17\1\0\1\17\3\0"+
    "\3\17\1\0\7\17\3\0\4\17\2\0\6\17\4\0"+
    "\15\17\5\0\3\17\1\0\7\17\53\0\2\2\25\0"+
    "\2\17\23\0\1\17\34\0\1\17\15\0\1\17\20\0"+
    "\15\17\63\0\41\17\21\0\1\17\4\0\1\17\2\0"+
    "\12\17\1\0\1\17\3\0\5\17\6\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\4\17\1\0\13\17\2\0"+
    "\4\17\5\0\5\17\4\0\1\17\21\0\51\17\u022d\0"+
    "\64\17\26\0\57\17\1\0\57\17\1\0\205\17\6\0"+
    "\11\17\14\0\46\17\1\0\1\17\5\0\1\17\2\0"+
    "\70\17\7\0\1\17\17\0\30\17\11\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\40\17\57\0"+
    "\1\17\325\0\3\17\31\0\17\17\1\0\5\17\2\0"+
    "\5\17\4\0\126\17\2\0\2\17\2\0\3\17\1\0"+
    "\132\17\1\0\4\17\5\0\53\17\1\0\136\17\21\0"+
    "\33\17\65\0\306\17\112\0\360\17\20\0\215\17\103\0"+
    "\56\17\2\0\15\17\3\0\34\17\24\0\63\17\1\0"+
    "\12\17\1\0\163\17\45\0\11\17\2\0\147\17\2\0"+
    "\65\17\2\0\5\17\60\0\61\17\30\0\64\17\14\0"+
    "\106\17\12\0\12\17\6\0\30\17\3\0\1\17\1\0"+
    "\61\17\2\0\44\17\14\0\35\17\3\0\101\17\16\0"+
    "\13\17\6\0\37\17\1\0\67\17\11\0\16\17\2\0"+
    "\12\17\6\0\27\17\3\0\111\17\30\0\3\17\2\0"+
    "\20\17\2\0\5\17\12\0\6\17\2\0\6\17\2\0"+
    "\6\17\11\0\7\17\1\0\7\17\1\0\53\17\1\0"+
    "\14\17\10\0\173\17\1\0\2\17\2\0\12\17\6\0"+
    "\244\17\14\0\27\17\4\0\61\17\4\0\u0100\2\156\17"+
    "\2\0\152\17\46\0\7\17\14\0\5\17\5\0\14\17"+
    "\1\0\15\17\1\0\5\17\1\0\1\17\1\0\2\17"+
    "\1\0\2\17\1\0\154\17\41\0\153\17\22\0\100\17"+
    "\2\0\66\17\50\0\14\17\4\0\20\17\20\0\20\17"+
    "\3\0\2\17\30\0\3\17\40\0\5\17\1\0\207\17"+
    "\23\0\12\17\7\0\32\17\4\0\1\17\1\0\32\17"+
    "\13\0\131\17\3\0\6\17\2\0\6\17\2\0\6\17"+
    "\2\0\3\17\43\0\14\17\1\0\32\17\1\0\23\17"+
    "\1\0\2\17\1\0\17\17\2\0\16\17\42\0\173\17"+
    "\105\0\65\17\210\0\1\17\202\0\35\17\3\0\61\17"+
    "\17\0\1\17\37\0\40\17\15\0\36\17\5\0\53\17"+
    "\5\0\36\17\2\0\44\17\4\0\10\17\1\0\5\17"+
    "\52\0\236\17\2\0\12\17\6\0\44\17\4\0\44\17"+
    "\4\0\50\17\10\0\64\17\234\0\67\17\11\0\26\17"+
    "\12\0\10\17\230\0\6\17\2\0\1\17\1\0\54\17"+
    "\1\0\2\17\3\0\1\17\2\0\27\17\12\0\27\17"+
    "\11\0\37\17\101\0\23\17\1\0\2\17\12\0\26\17"+
    "\12\0\32\17\106\0\70\17\6\0\2\17\100\0\4\17"+
    "\1\0\2\17\5\0\10\17\1\0\3\17\1\0\35\17"+
    "\2\0\3\17\4\0\1\17\40\0\35\17\3\0\35\17"+
    "\43\0\10\17\1\0\36\17\31\0\66\17\12\0\26\17"+
    "\12\0\23\17\15\0\22\17\156\0\111\17\67\0\63\17"+
    "\15\0\63\17\15\0\50\17\10\0\12\17\306\0\35\17"+
    "\12\0\1\17\10\0\41\17\217\0\27\17\11\0\107\17"+
    "\37\0\12\17\17\0\74\17\25\0\31\17\7\0\12\17"+
    "\6\0\65\17\1\0\12\17\4\0\3\17\11\0\44\17"+
    "\2\0\1\17\11\0\105\17\4\0\4\17\3\0\13\17"+
    "\1\0\1\17\43\0\22\17\1\0\45\17\6\0\1\17"+
    "\101\0\7\17\1\0\1\17\1\0\4\17\1\0\17\17"+
    "\1\0\12\17\7\0\73\17\5\0\12\17\6\0\4\17"+
    "\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17"+
    "\1\0\2\17\1\0\5\17\1\0\12\17\2\0\2\17"+
    "\2\0\3\17\2\0\1\17\6\0\1\17\5\0\7\17"+
    "\2\0\7\17\3\0\5\17\213\0\113\17\5\0\12\17"+
    "\4\0\2\17\40\0\106\17\1\0\1\17\10\0\12\17"+
    "\246\0\66\17\2\0\11\17\27\0\6\17\42\0\101\17"+
    "\3\0\1\17\13\0\12\17\46\0\71\17\7\0\12\17"+
    "\66\0\33\17\2\0\17\17\4\0\12\17\306\0\73\17"+
    "\145\0\112\17\25\0\1\17\240\0\10\17\2\0\56\17"+
    "\2\0\10\17\1\0\2\17\33\0\77\17\10\0\1\17"+
    "\10\0\112\17\3\0\1\17\42\0\71\17\7\0\11\17"+
    "\1\0\55\17\1\0\11\17\17\0\12\17\30\0\36\17"+
    "\2\0\26\17\1\0\16\17\111\0\7\17\1\0\2\17"+
    "\1\0\54\17\3\0\1\17\1\0\2\17\1\0\11\17"+
    "\10\0\12\17\6\0\6\17\1\0\2\17\1\0\45\17"+
    "\1\0\2\17\1\0\6\17\7\0\12\17\u0136\0\27\17"+
    "\11\0\232\17\146\0\157\17\21\0\304\17\274\0\57\17"+
    "\321\0\107\17\271\0\71\17\7\0\37\17\1\0\12\17"+
    "\146\0\36\17\2\0\5\17\13\0\67\17\11\0\4\17"+
    "\14\0\12\17\11\0\25\17\5\0\23\17\260\0\100\17"+
    "\200\0\113\17\4\0\71\17\7\0\21\17\100\0\2\17"+
    "\1\0\1\17\34\0\370\17\10\0\363\17\15\0\37\17"+
    "\61\0\3\17\21\0\4\17\10\0\u018c\17\4\0\153\17"+
    "\5\0\15\17\3\0\11\17\7\0\12\17\3\0\2\17"+
    "\306\0\5\17\3\0\6\17\10\0\10\17\2\0\7\17"+
    "\36\0\4\17\224\0\3\17\273\0\125\17\1\0\107\17"+
    "\1\0\2\17\2\0\1\17\2\0\2\17\2\0\4\17"+
    "\1\0\14\17\1\0\1\17\1\0\7\17\1\0\101\17"+
    "\1\0\4\17\2\0\10\17\1\0\7\17\1\0\34\17"+
    "\1\0\4\17\1\0\5\17\1\0\1\17\3\0\7\17"+
    "\1\0\u0154\17\2\0\31\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17"+
    "\1\0\31\17\1\0\37\17\1\0\31\17\1\0\10\17"+
    "\2\0\151\17\4\0\62\17\10\0\1\17\16\0\1\17"+
    "\26\0\5\17\1\0\17\17\120\0\7\17\1\0\21\17"+
    "\2\0\7\17\1\0\2\17\1\0\5\17\325\0\55\17"+
    "\3\0\16\17\2\0\12\17\4\0\1\17\u0171\0\72\17"+
    "\6\0\305\17\13\0\7\17\51\0\114\17\4\0\12\17"+
    "\246\0\4\17\1\0\33\17\1\0\2\17\1\0\1\17"+
    "\2\0\1\17\1\0\12\17\1\0\4\17\1\0\1\17"+
    "\1\0\1\17\6\0\1\17\4\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\3\17\1\0\2\17\1\0\1\17"+
    "\2\0\1\17\1\0\1\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\2\17\1\0\1\17\2\0\4\17"+
    "\1\0\7\17\1\0\4\17\1\0\4\17\1\0\1\17"+
    "\1\0\12\17\1\0\21\17\5\0\3\17\1\0\5\17"+
    "\1\0\21\17\164\0\32\17\6\0\32\17\6\0\32\17"+
    "\166\0\327\17\51\0\65\17\13\0\336\17\2\0\u0182\17"+
    "\16\0\u0131\17\37\0\36\17\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\3\5\1\22\1\1\1\23\24\5"+
    "\1\24\1\25\1\3\1\26\1\0\1\27\1\3\1\0"+
    "\1\30\1\31\1\32\1\21\1\33\5\5\1\34\3\5"+
    "\1\35\1\0\4\5\1\36\10\5\1\37\15\5\1\40"+
    "\1\41\6\5\1\42\31\5\1\31\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\14\5\1\54"+
    "\14\5\1\55\14\5\1\56\20\5\1\57\1\60\1\61"+
    "\5\5\1\62\27\5\1\63\1\5\1\64\11\5\1\65"+
    "\1\66\2\5\1\67\1\5\1\70\7\5\1\71\1\72"+
    "\12\5\1\73\7\5\1\74\5\5\1\75\1\5\1\76"+
    "\1\77\1\100\3\5\1\101\4\5\1\102\1\5\1\103"+
    "\1\5\1\104\1\5\1\105\1\106\3\5\1\107\4\5"+
    "\1\110\1\5\1\111\1\112\11\5\1\113\1\114\1\115"+
    "\1\5\1\116\1\117\1\5\1\120\1\121\4\5\1\122"+
    "\4\5\1\123\5\5\1\124\1\5\1\125\3\5\1\126"+
    "\5\5\1\127\1\130\11\5\1\131\1\132\1\5\1\133"+
    "\1\134\1\135\1\136\10\5\1\137\1\5\1\140\1\141"+
    "\5\5\1\142\1\5\1\143\1\144\1\145\1\146\1\147"+
    "\4\5\1\150\1\151\1\5\1\152\1\5\1\153\1\154"+
    "\1\155\4\5\1\156\1\5\1\157\1\5\1\160\4\5"+
    "\1\161\2\5\1\162\1\163\1\164\3\5\1\165\1\166"+
    "\1\167\1\5\1\170\1\171\1\172\5\5\1\173\1\174"+
    "\2\5\1\175\2\5\1\176\1\177\1\5\1\200\1\201"+
    "\1\202\1\5\1\203\1\204\1\5\1\205\1\5\1\206"+
    "\1\5\1\207\1\210\1\211\1\5\1\212\1\213";

  private static int [] zzUnpackAction() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\272\0\272\0\272\0\272\0\272\0\u022e\0\272"+
    "\0\272\0\272\0\272\0\272\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\272\0\u0364\0\272\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\272"+
    "\0\272\0\272\0\u087a\0\u08b8\0\272\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\272\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\u0b62\0\u01f0\0\u0ba0\0\u0bde\0\u0c1c\0\u01f0\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u01f0\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u01f0\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\u01f0\0\u01f0\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u01f0\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u1aa4\0\u1ae2"+
    "\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2"+
    "\0\u1d10\0\u1d4e\0\u01f0\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u01f0"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u01f0\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u01f0\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u01f0\0\u2e04\0\u01f0"+
    "\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u01f0\0\u01f0\0\u3070\0\u30ae\0\u01f0\0\u30ec\0\u01f0"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260\0\u329e\0\u01f0"+
    "\0\u01f0\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450"+
    "\0\u348e\0\u34cc\0\u350a\0\u01f0\0\u3548\0\u3586\0\u35c4\0\u3602"+
    "\0\u3640\0\u367e\0\u36bc\0\u01f0\0\u36fa\0\u3738\0\u3776\0\u37b4"+
    "\0\u37f2\0\u01f0\0\u3830\0\u01f0\0\u01f0\0\u01f0\0\u386e\0\u38ac"+
    "\0\u38ea\0\u01f0\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u01f0\0\u3a20"+
    "\0\u01f0\0\u3a5e\0\u01f0\0\u3a9c\0\u01f0\0\u01f0\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u01f0\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u01f0\0\u3c8c"+
    "\0\u01f0\0\u01f0\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00"+
    "\0\u3e3e\0\u3e7c\0\u3eba\0\u01f0\0\u01f0\0\u01f0\0\u3ef8\0\u01f0"+
    "\0\u01f0\0\u3f36\0\u01f0\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c"+
    "\0\u01f0\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u01f0\0\u41a2\0\u41e0"+
    "\0\u421e\0\u425c\0\u429a\0\u01f0\0\u42d8\0\u01f0\0\u4316\0\u4354"+
    "\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8\0\u4506\0\u01f0"+
    "\0\u01f0\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8"+
    "\0\u46f6\0\u4734\0\u01f0\0\u01f0\0\u4772\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u48e6\0\u4924"+
    "\0\u4962\0\u01f0\0\u49a0\0\u01f0\0\u01f0\0\u49de\0\u4a1c\0\u4a5a"+
    "\0\u4a98\0\u4ad6\0\u01f0\0\u4b14\0\u01f0\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u01f0\0\u01f0\0\u4c88"+
    "\0\u01f0\0\u4cc6\0\u01f0\0\u01f0\0\u01f0\0\u4d04\0\u4d42\0\u4d80"+
    "\0\u4dbe\0\u01f0\0\u4dfc\0\u01f0\0\u4e3a\0\u01f0\0\u4e78\0\u4eb6"+
    "\0\u4ef4\0\u4f32\0\u01f0\0\u4f70\0\u4fae\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u4fec\0\u502a\0\u5068\0\u01f0\0\u01f0\0\u01f0\0\u50a6\0\u01f0"+
    "\0\u01f0\0\u01f0\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc\0\u01f0"+
    "\0\u01f0\0\u521a\0\u5258\0\u01f0\0\u5296\0\u52d4\0\u01f0\0\u01f0"+
    "\0\u5312\0\u01f0\0\u01f0\0\u01f0\0\u5350\0\u01f0\0\u01f0\0\u538e"+
    "\0\u01f0\0\u53cc\0\u01f0\0\u540a\0\u01f0\0\u01f0\0\u01f0\0\u5448"+
    "\0\u01f0\0\u01f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\7\4"+
    "\1\22\1\23\1\4\1\24\1\4\1\25\1\11\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\11\1\45"+
    "\1\46\1\11\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\11\1\56\1\11\1\57\1\11\1\60\1\61"+
    "\1\62\1\63\1\0\1\64\72\62\1\65\1\66\1\0"+
    "\1\67\1\66\1\70\25\65\1\71\42\65\77\0\1\5"+
    "\1\0\1\6\73\0\1\5\100\0\1\7\71\0\1\10"+
    "\1\0\1\10\1\0\72\10\17\0\7\11\6\0\4\11"+
    "\3\0\31\11\34\0\1\72\43\0\1\73\1\0\1\73"+
    "\1\0\24\73\1\74\45\73\17\0\3\11\1\75\1\11"+
    "\1\76\1\11\6\0\4\11\3\0\31\11\21\0\1\11"+
    "\1\77\1\11\1\100\1\11\1\101\1\102\6\0\4\11"+
    "\3\0\31\11\21\0\1\11\1\103\1\11\1\104\1\11"+
    "\1\105\1\106\6\0\4\11\3\0\31\11\3\0\1\62"+
    "\1\0\1\107\111\0\7\11\6\0\4\11\3\0\2\11"+
    "\1\110\7\11\1\111\5\11\1\112\1\113\1\114\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\1\115\11\11\1\116"+
    "\2\11\1\117\13\11\21\0\7\11\6\0\4\11\3\0"+
    "\7\11\1\120\5\11\1\121\1\122\12\11\21\0\7\11"+
    "\6\0\4\11\3\0\4\11\1\123\3\11\1\124\4\11"+
    "\1\125\2\11\1\126\10\11\21\0\7\11\6\0\4\11"+
    "\3\0\12\11\1\127\1\11\1\130\7\11\1\131\1\11"+
    "\1\132\2\11\21\0\7\11\6\0\4\11\3\0\1\133"+
    "\14\11\1\134\13\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\135\13\11\1\136\2\11\1\137\5\11\21\0"+
    "\7\11\6\0\4\11\3\0\4\11\1\140\3\11\1\141"+
    "\4\11\1\142\13\11\21\0\7\11\6\0\4\11\3\0"+
    "\3\11\1\143\1\11\1\144\5\11\1\145\1\146\14\11"+
    "\21\0\7\11\6\0\4\11\3\0\15\11\1\147\13\11"+
    "\21\0\7\11\6\0\4\11\3\0\1\150\14\11\1\151"+
    "\13\11\21\0\7\11\6\0\4\11\3\0\13\11\1\152"+
    "\1\153\1\11\1\154\1\11\1\155\2\11\1\156\5\11"+
    "\21\0\7\11\6\0\4\11\3\0\1\157\6\11\1\160"+
    "\5\11\1\161\2\11\1\162\10\11\21\0\7\11\6\0"+
    "\4\11\3\0\23\11\1\163\5\11\21\0\7\11\6\0"+
    "\4\11\3\0\4\11\1\164\24\11\21\0\7\11\6\0"+
    "\4\11\3\0\1\165\3\11\1\166\3\11\1\167\11\11"+
    "\1\170\4\11\1\171\1\11\21\0\7\11\6\0\4\11"+
    "\3\0\4\11\1\172\2\11\1\173\1\174\4\11\1\175"+
    "\2\11\1\176\6\11\1\177\1\11\21\0\7\11\6\0"+
    "\4\11\3\0\14\11\1\200\1\11\1\201\12\11\21\0"+
    "\7\11\6\0\4\11\3\0\1\202\7\11\1\203\20\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\204\24\11"+
    "\3\0\1\63\1\0\1\64\73\0\1\63\75\0\1\66"+
    "\1\0\1\67\1\66\72\0\1\66\74\0\1\70\1\0"+
    "\1\70\1\0\72\70\1\205\1\0\1\205\1\0\24\205"+
    "\1\206\45\205\1\73\1\0\1\73\1\0\72\73\1\74"+
    "\1\0\1\74\1\0\72\74\17\0\2\11\1\207\4\11"+
    "\6\0\4\11\3\0\31\11\21\0\4\11\1\210\2\11"+
    "\6\0\4\11\3\0\31\11\21\0\5\11\1\211\1\11"+
    "\6\0\4\11\3\0\31\11\21\0\2\11\1\212\4\11"+
    "\6\0\4\11\3\0\31\11\21\0\4\11\1\213\2\11"+
    "\6\0\4\11\3\0\31\11\21\0\5\11\1\214\1\11"+
    "\6\0\4\11\3\0\31\11\21\0\2\11\1\215\4\11"+
    "\6\0\4\11\3\0\31\11\21\0\4\11\1\216\2\11"+
    "\6\0\4\11\3\0\31\11\3\0\1\62\113\0\7\11"+
    "\6\0\4\11\3\0\22\11\1\217\6\11\21\0\7\11"+
    "\6\0\4\11\3\0\25\11\1\220\3\11\21\0\7\11"+
    "\6\0\4\11\3\0\20\11\1\221\10\11\21\0\7\11"+
    "\6\0\4\11\3\0\21\11\1\222\5\11\1\223\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\21\11\1\224\7\11"+
    "\21\0\7\11\6\0\4\11\3\0\15\11\1\225\13\11"+
    "\21\0\7\11\6\0\4\11\3\0\15\11\1\226\13\11"+
    "\21\0\7\11\6\0\4\11\3\0\1\227\14\11\1\230"+
    "\13\11\21\0\7\11\6\0\4\11\3\0\13\11\1\231"+
    "\1\232\14\11\21\0\7\11\6\0\4\11\3\0\23\11"+
    "\1\233\5\11\21\0\7\11\6\0\4\11\3\0\5\11"+
    "\1\234\23\11\21\0\7\11\6\0\4\11\3\0\1\235"+
    "\30\11\21\0\7\11\6\0\4\11\3\0\15\11\1\236"+
    "\13\11\21\0\7\11\6\0\4\11\3\0\21\11\1\237"+
    "\7\11\21\0\7\11\6\0\4\11\3\0\22\11\1\240"+
    "\1\241\5\11\21\0\7\11\6\0\4\11\3\0\4\11"+
    "\1\242\24\11\21\0\7\11\6\0\4\11\3\0\10\11"+
    "\1\243\11\11\1\244\6\11\21\0\7\11\6\0\4\11"+
    "\3\0\12\11\1\245\7\11\1\246\6\11\21\0\7\11"+
    "\6\0\4\11\3\0\20\11\1\247\10\11\21\0\7\11"+
    "\6\0\4\11\3\0\22\11\1\250\6\11\21\0\7\11"+
    "\6\0\4\11\3\0\15\11\1\251\13\11\21\0\7\11"+
    "\6\0\4\11\3\0\1\252\30\11\21\0\7\11\6\0"+
    "\4\11\3\0\1\253\30\11\21\0\7\11\6\0\4\11"+
    "\3\0\6\11\1\254\22\11\21\0\7\11\6\0\4\11"+
    "\3\0\15\11\1\255\13\11\21\0\7\11\6\0\4\11"+
    "\3\0\16\11\1\256\12\11\21\0\7\11\6\0\4\11"+
    "\3\0\2\11\1\257\5\11\1\260\5\11\1\261\2\11"+
    "\1\262\1\263\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\2\11\1\264\22\11\1\265\3\11\21\0\7\11\6\0"+
    "\4\11\3\0\2\11\1\266\17\11\1\267\6\11\21\0"+
    "\7\11\6\0\4\11\3\0\3\11\1\270\25\11\21\0"+
    "\7\11\6\0\4\11\3\0\10\11\1\271\20\11\21\0"+
    "\7\11\6\0\4\11\3\0\2\11\1\272\26\11\21\0"+
    "\7\11\6\0\4\11\3\0\1\273\30\11\21\0\7\11"+
    "\6\0\4\11\3\0\22\11\1\274\6\11\21\0\7\11"+
    "\6\0\4\11\3\0\2\11\1\275\15\11\1\276\1\277"+
    "\7\11\21\0\7\11\6\0\4\11\3\0\1\300\30\11"+
    "\21\0\7\11\6\0\4\11\3\0\20\11\1\301\10\11"+
    "\21\0\7\11\6\0\4\11\3\0\10\11\1\302\4\11"+
    "\1\303\13\11\21\0\7\11\6\0\4\11\3\0\4\11"+
    "\1\304\24\11\21\0\7\11\6\0\4\11\3\0\2\11"+
    "\1\305\1\306\1\11\1\307\1\310\10\11\1\311\1\11"+
    "\1\312\7\11\21\0\7\11\6\0\4\11\3\0\24\11"+
    "\1\313\4\11\21\0\7\11\6\0\4\11\3\0\14\11"+
    "\1\314\3\11\1\315\1\11\1\316\1\11\1\317\4\11"+
    "\21\0\7\11\6\0\4\11\3\0\6\11\1\320\21\11"+
    "\1\321\21\0\7\11\6\0\4\11\3\0\1\322\17\11"+
    "\1\323\10\11\21\0\7\11\6\0\4\11\3\0\14\11"+
    "\1\324\14\11\21\0\7\11\6\0\4\11\3\0\12\11"+
    "\1\325\13\11\1\326\2\11\21\0\7\11\6\0\4\11"+
    "\3\0\20\11\1\327\10\11\21\0\7\11\6\0\4\11"+
    "\3\0\13\11\1\330\15\11\21\0\7\11\6\0\4\11"+
    "\3\0\16\11\1\331\12\11\21\0\7\11\6\0\4\11"+
    "\3\0\23\11\1\332\5\11\21\0\7\11\6\0\4\11"+
    "\3\0\16\11\1\333\12\11\21\0\7\11\6\0\4\11"+
    "\3\0\13\11\1\334\15\11\21\0\7\11\6\0\4\11"+
    "\3\0\3\11\1\335\25\11\21\0\7\11\6\0\4\11"+
    "\3\0\20\11\1\336\10\11\21\0\7\11\6\0\4\11"+
    "\3\0\22\11\1\337\6\11\21\0\7\11\6\0\4\11"+
    "\3\0\12\11\1\340\16\11\2\0\1\205\1\0\1\205"+
    "\1\0\72\205\1\206\1\0\1\206\1\0\72\206\17\0"+
    "\7\11\6\0\4\11\3\0\10\11\1\341\20\11\21\0"+
    "\7\11\6\0\4\11\3\0\1\342\30\11\21\0\7\11"+
    "\6\0\4\11\3\0\1\343\30\11\21\0\7\11\6\0"+
    "\4\11\3\0\4\11\1\344\24\11\21\0\7\11\6\0"+
    "\4\11\3\0\14\11\1\345\14\11\21\0\7\11\6\0"+
    "\4\11\3\0\4\11\1\346\24\11\21\0\7\11\6\0"+
    "\4\11\3\0\2\11\1\347\26\11\21\0\7\11\6\0"+
    "\4\11\3\0\12\11\1\350\16\11\21\0\7\11\6\0"+
    "\4\11\3\0\14\11\1\351\14\11\21\0\7\11\6\0"+
    "\4\11\3\0\10\11\1\352\20\11\21\0\7\11\6\0"+
    "\4\11\3\0\13\11\1\353\2\11\1\354\12\11\21\0"+
    "\7\11\6\0\4\11\3\0\14\11\1\355\4\11\1\356"+
    "\1\357\6\11\21\0\7\11\6\0\4\11\3\0\1\360"+
    "\30\11\21\0\7\11\6\0\4\11\3\0\6\11\1\361"+
    "\22\11\21\0\7\11\6\0\4\11\3\0\16\11\1\362"+
    "\12\11\21\0\7\11\6\0\4\11\3\0\4\11\1\363"+
    "\24\11\21\0\7\11\6\0\4\11\3\0\4\11\1\364"+
    "\13\11\1\365\10\11\21\0\7\11\6\0\4\11\3\0"+
    "\13\11\1\366\15\11\21\0\7\11\6\0\4\11\3\0"+
    "\14\11\1\367\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\370\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\371\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\21\11\1\372\7\11\21\0\7\11\6\0\4\11\3\0"+
    "\1\373\30\11\21\0\7\11\6\0\4\11\3\0\13\11"+
    "\1\374\15\11\21\0\7\11\6\0\4\11\3\0\23\11"+
    "\1\375\5\11\21\0\7\11\6\0\4\11\3\0\20\11"+
    "\1\376\10\11\21\0\7\11\6\0\4\11\3\0\12\11"+
    "\1\377\16\11\21\0\7\11\6\0\4\11\3\0\7\11"+
    "\1\u0100\21\11\21\0\7\11\6\0\4\11\3\0\11\11"+
    "\1\u0101\17\11\21\0\7\11\6\0\4\11\3\0\15\11"+
    "\1\u0102\13\11\21\0\7\11\6\0\4\11\3\0\12\11"+
    "\1\u0103\16\11\21\0\7\11\6\0\4\11\3\0\22\11"+
    "\1\u0104\6\11\21\0\7\11\6\0\4\11\3\0\23\11"+
    "\1\u0105\5\11\21\0\7\11\6\0\4\11\3\0\22\11"+
    "\1\u0106\6\11\21\0\7\11\6\0\4\11\3\0\4\11"+
    "\1\u0107\24\11\21\0\7\11\6\0\4\11\3\0\1\u0108"+
    "\30\11\21\0\7\11\6\0\4\11\3\0\7\11\1\u0109"+
    "\21\11\21\0\7\11\6\0\4\11\3\0\2\11\1\u010a"+
    "\26\11\21\0\7\11\6\0\4\11\3\0\23\11\1\u010b"+
    "\5\11\21\0\7\11\6\0\4\11\3\0\22\11\1\u010c"+
    "\6\11\21\0\7\11\6\0\4\11\3\0\15\11\1\u010d"+
    "\13\11\21\0\7\11\6\0\4\11\3\0\14\11\1\u010e"+
    "\14\11\21\0\7\11\6\0\4\11\3\0\16\11\1\u010f"+
    "\12\11\21\0\7\11\6\0\4\11\3\0\11\11\1\u0110"+
    "\17\11\21\0\7\11\6\0\4\11\3\0\1\u0111\30\11"+
    "\21\0\7\11\6\0\4\11\3\0\21\11\1\u0112\7\11"+
    "\21\0\7\11\6\0\4\11\3\0\21\11\1\u0113\7\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u0114\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\15\11\1\u0115\6\11"+
    "\1\u0116\4\11\21\0\7\11\6\0\4\11\3\0\3\11"+
    "\1\u0117\25\11\21\0\7\11\6\0\4\11\3\0\23\11"+
    "\1\u0118\5\11\21\0\7\11\6\0\4\11\3\0\15\11"+
    "\1\u0119\6\11\1\u011a\4\11\21\0\7\11\6\0\4\11"+
    "\3\0\23\11\1\u011b\5\11\21\0\7\11\6\0\4\11"+
    "\3\0\16\11\1\u011c\12\11\21\0\7\11\6\0\4\11"+
    "\3\0\4\11\1\u011d\24\11\21\0\7\11\6\0\4\11"+
    "\3\0\3\11\1\u011e\25\11\21\0\7\11\6\0\4\11"+
    "\3\0\10\11\1\u011f\20\11\21\0\7\11\6\0\4\11"+
    "\3\0\4\11\1\u0120\24\11\21\0\7\11\6\0\4\11"+
    "\3\0\14\11\1\u0121\14\11\21\0\7\11\6\0\4\11"+
    "\3\0\4\11\1\u0122\24\11\21\0\7\11\6\0\4\11"+
    "\3\0\2\11\1\u0123\17\11\1\u0124\6\11\21\0\7\11"+
    "\6\0\4\11\3\0\10\11\1\u0125\12\11\1\u0126\5\11"+
    "\21\0\7\11\6\0\4\11\3\0\2\11\1\u0127\26\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u0128\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u0129\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\15\11\1\u012a\13\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u012b\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\15\11\1\u012c\13\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u012d\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u012e\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\1\u012f\30\11\21\0"+
    "\7\11\6\0\4\11\3\0\1\u0130\30\11\21\0\7\11"+
    "\6\0\4\11\3\0\14\11\1\u0131\14\11\21\0\7\11"+
    "\6\0\4\11\3\0\7\11\1\u0132\21\11\21\0\7\11"+
    "\6\0\4\11\3\0\12\11\1\u0133\16\11\21\0\7\11"+
    "\6\0\4\11\3\0\15\11\1\u0134\6\11\1\u0135\4\11"+
    "\21\0\7\11\6\0\4\11\3\0\27\11\1\u0136\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\27\11\1\u0137\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\20\11\1\u0138\10\11"+
    "\21\0\7\11\6\0\4\11\3\0\2\11\1\u0139\26\11"+
    "\21\0\7\11\6\0\4\11\3\0\11\11\1\u013a\17\11"+
    "\21\0\7\11\6\0\4\11\3\0\6\11\1\u013b\22\11"+
    "\21\0\7\11\6\0\4\11\3\0\2\11\1\u013c\26\11"+
    "\21\0\7\11\6\0\4\11\3\0\1\u013d\30\11\21\0"+
    "\7\11\6\0\4\11\3\0\15\11\1\u013e\13\11\21\0"+
    "\7\11\6\0\4\11\3\0\4\11\1\u013f\24\11\21\0"+
    "\7\11\6\0\4\11\3\0\22\11\1\u0140\6\11\21\0"+
    "\7\11\6\0\4\11\3\0\1\u0141\30\11\21\0\7\11"+
    "\6\0\4\11\3\0\23\11\1\u0142\5\11\21\0\7\11"+
    "\6\0\4\11\3\0\14\11\1\u0143\14\11\21\0\7\11"+
    "\6\0\4\11\3\0\20\11\1\u0144\10\11\21\0\7\11"+
    "\6\0\4\11\3\0\27\11\1\u0145\1\11\21\0\7\11"+
    "\6\0\4\11\3\0\22\11\1\u0146\6\11\21\0\7\11"+
    "\6\0\4\11\3\0\20\11\1\u0147\10\11\21\0\7\11"+
    "\6\0\4\11\3\0\4\11\1\u0148\24\11\21\0\7\11"+
    "\6\0\4\11\3\0\12\11\1\u0149\16\11\21\0\7\11"+
    "\6\0\4\11\3\0\1\u014a\30\11\21\0\7\11\6\0"+
    "\4\11\3\0\16\11\1\u014b\12\11\21\0\7\11\6\0"+
    "\4\11\3\0\3\11\1\u014c\25\11\21\0\7\11\6\0"+
    "\4\11\3\0\22\11\1\u014d\6\11\21\0\7\11\6\0"+
    "\4\11\3\0\20\11\1\u014e\10\11\21\0\7\11\6\0"+
    "\4\11\3\0\23\11\1\u014f\5\11\21\0\7\11\6\0"+
    "\4\11\3\0\10\11\1\u0150\20\11\21\0\7\11\6\0"+
    "\4\11\3\0\22\11\1\u0151\6\11\21\0\7\11\6\0"+
    "\4\11\3\0\1\u0152\30\11\21\0\7\11\6\0\4\11"+
    "\3\0\20\11\1\u0153\10\11\21\0\7\11\6\0\4\11"+
    "\3\0\22\11\1\u0154\6\11\21\0\7\11\6\0\4\11"+
    "\3\0\10\11\1\u0155\20\11\21\0\7\11\6\0\4\11"+
    "\3\0\7\11\1\u0156\21\11\21\0\7\11\6\0\4\11"+
    "\3\0\12\11\1\u0157\16\11\21\0\7\11\6\0\4\11"+
    "\3\0\3\11\1\u0158\25\11\21\0\7\11\6\0\4\11"+
    "\3\0\6\11\1\u0159\22\11\21\0\7\11\6\0\4\11"+
    "\3\0\23\11\1\u015a\5\11\21\0\7\11\6\0\4\11"+
    "\3\0\4\11\1\u015b\24\11\21\0\7\11\6\0\4\11"+
    "\3\0\13\11\1\u015c\15\11\21\0\7\11\6\0\4\11"+
    "\3\0\10\11\1\u015d\20\11\21\0\7\11\6\0\4\11"+
    "\3\0\4\11\1\u015e\24\11\21\0\7\11\6\0\4\11"+
    "\3\0\20\11\1\u015f\10\11\21\0\7\11\6\0\4\11"+
    "\3\0\1\u0160\30\11\21\0\7\11\6\0\4\11\3\0"+
    "\23\11\1\u0161\5\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u0162\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\20\11\1\u0163\10\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u0164\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\1\u0165\30\11\21\0\7\11\6\0\4\11\3\0\20\11"+
    "\1\u0166\10\11\21\0\7\11\6\0\4\11\3\0\1\u0167"+
    "\30\11\21\0\7\11\6\0\4\11\3\0\11\11\1\u0168"+
    "\17\11\21\0\7\11\6\0\4\11\3\0\4\11\1\u0169"+
    "\24\11\21\0\7\11\6\0\4\11\3\0\14\11\1\u016a"+
    "\14\11\21\0\7\11\6\0\4\11\3\0\2\11\1\u016b"+
    "\26\11\21\0\7\11\6\0\4\11\3\0\13\11\1\u016c"+
    "\15\11\21\0\7\11\6\0\4\11\3\0\22\11\1\u016d"+
    "\6\11\21\0\7\11\6\0\4\11\3\0\12\11\1\u016e"+
    "\16\11\21\0\7\11\6\0\4\11\3\0\22\11\1\u016f"+
    "\6\11\21\0\7\11\6\0\4\11\3\0\22\11\1\u0170"+
    "\6\11\21\0\7\11\6\0\4\11\3\0\10\11\1\u0171"+
    "\20\11\21\0\7\11\6\0\4\11\3\0\15\11\1\u0172"+
    "\13\11\21\0\7\11\6\0\4\11\3\0\14\11\1\u0173"+
    "\14\11\21\0\7\11\6\0\4\11\3\0\4\11\1\u0174"+
    "\3\11\1\u0175\20\11\21\0\7\11\6\0\4\11\3\0"+
    "\21\11\1\u0176\7\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u0177\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u0178\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u0179\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\14\11\1\u017a\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\14\11\1\u017b\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\2\11\1\u017c\26\11\21\0\7\11\6\0\4\11\3\0"+
    "\1\u017d\30\11\21\0\7\11\6\0\4\11\3\0\10\11"+
    "\1\u017e\20\11\21\0\7\11\6\0\4\11\3\0\12\11"+
    "\1\u017f\16\11\21\0\7\11\6\0\4\11\3\0\15\11"+
    "\1\u0180\13\11\21\0\7\11\6\0\4\11\3\0\14\11"+
    "\1\u0181\14\11\21\0\7\11\6\0\4\11\3\0\22\11"+
    "\1\u0182\6\11\21\0\7\11\6\0\4\11\3\0\4\11"+
    "\1\u0183\24\11\21\0\7\11\6\0\4\11\3\0\7\11"+
    "\1\u0184\21\11\21\0\7\11\6\0\4\11\3\0\22\11"+
    "\1\u0185\6\11\21\0\7\11\6\0\4\11\3\0\3\11"+
    "\1\u0186\25\11\21\0\7\11\6\0\4\11\3\0\1\u0187"+
    "\30\11\21\0\7\11\6\0\4\11\3\0\14\11\1\u0188"+
    "\14\11\21\0\7\11\6\0\4\11\3\0\5\11\1\u0189"+
    "\6\11\1\u018a\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u018b\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\14\11\1\u018c\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u018d\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u018e\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u018f\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u0190\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u0191\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\24\11\1\u0192\4\11\21\0\7\11\6\0\4\11\3\0"+
    "\10\11\1\u0193\20\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u0194\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\2\11\1\u0195\26\11\21\0\7\11\6\0\4\11\3\0"+
    "\3\11\1\u0196\25\11\21\0\7\11\6\0\4\11\3\0"+
    "\3\11\1\u0197\25\11\21\0\7\11\6\0\4\11\3\0"+
    "\21\11\1\u0198\7\11\21\0\7\11\6\0\4\11\3\0"+
    "\12\11\1\u0199\16\11\21\0\7\11\6\0\4\11\3\0"+
    "\10\11\1\u019a\20\11\21\0\7\11\6\0\4\11\3\0"+
    "\12\11\1\u019b\16\11\21\0\7\11\6\0\4\11\3\0"+
    "\6\11\1\u019c\22\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u019d\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u019e\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u019f\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\15\11\1\u01a0\13\11\21\0\7\11\6\0\4\11\3\0"+
    "\2\11\1\u01a1\26\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u01a2\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\14\11\1\u01a3\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\25\11\1\u01a4\3\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u01a5\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\3\11\1\u01a6\25\11\21\0\7\11\6\0\4\11\3\0"+
    "\4\11\1\u01a7\24\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u01a8\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\14\11\1\u01a9\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\14\11\1\u01aa\14\11\21\0\7\11\6\0\4\11\3\0"+
    "\22\11\1\u01ab\6\11\21\0\7\11\6\0\4\11\3\0"+
    "\21\11\1\u01ac\7\11\21\0\7\11\6\0\4\11\3\0"+
    "\1\u01ad\30\11\21\0\7\11\6\0\4\11\3\0\3\11"+
    "\1\u01ae\25\11\21\0\7\11\6\0\4\11\3\0\4\11"+
    "\1\u01af\24\11\21\0\7\11\6\0\4\11\3\0\12\11"+
    "\1\u01b0\16\11\21\0\7\11\6\0\4\11\3\0\2\11"+
    "\1\u01b1\26\11\21\0\7\11\6\0\4\11\3\0\1\u01b2"+
    "\30\11\21\0\7\11\6\0\4\11\3\0\1\u01b3\30\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01b4\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\21\11\1\u01b5\7\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01b6\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01b7\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01b8\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01b9\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01ba\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01bb\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01bc\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\12\11\1\u01bd\16\11"+
    "\21\0\7\11\6\0\4\11\3\0\6\11\1\u01be\22\11"+
    "\21\0\7\11\6\0\4\11\3\0\7\11\1\u01bf\21\11"+
    "\21\0\7\11\6\0\4\11\3\0\6\11\1\u01c0\22\11"+
    "\21\0\7\11\6\0\4\11\3\0\27\11\1\u01c1\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\14\11\1\u01c2\14\11"+
    "\21\0\7\11\6\0\4\11\3\0\10\11\1\u01c3\20\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01c4\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01c5\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01c6\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\12\11\1\u01c7\16\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01c8\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\2\11\1\u01c9\26\11"+
    "\21\0\7\11\6\0\4\11\3\0\12\11\1\u01ca\16\11"+
    "\21\0\7\11\6\0\4\11\3\0\27\11\1\u01cb\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\27\11\1\u01cc\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\20\11\1\u01cd\10\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01ce\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\27\11\1\u01cf\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01d0\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\22\11\1\u01d1\6\11"+
    "\21\0\7\11\6\0\4\11\3\0\15\11\1\u01d2\13\11"+
    "\21\0\7\11\6\0\4\11\3\0\20\11\1\u01d3\10\11"+
    "\21\0\7\11\6\0\4\11\3\0\10\11\1\u01d4\20\11"+
    "\21\0\7\11\6\0\4\11\3\0\4\11\1\u01d5\24\11"+
    "\21\0\7\11\6\0\4\11\3\0\27\11\1\u01d6\1\11"+
    "\21\0\7\11\6\0\4\11\3\0\3\11\1\u01d7\25\11"+
    "\21\0\7\11\6\0\4\11\3\0\14\11\1\u01d8\14\11"+
    "\21\0\7\11\6\0\4\11\3\0\2\11\1\u01d9\26\11"+
    "\21\0\7\11\6\0\4\11\3\0\21\11\1\u01da\7\11"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21638];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\0\3\1\5\11\1\1\5\11"+
    "\4\1\1\11\1\1\1\11\24\1\3\11\1\1\1\0"+
    "\1\11\1\1\1\0\2\1\1\11\14\1\1\0\u0193\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[474];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FPPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 140: break;
          case 2:
            { return END_OF_LINE;
            }
          // fall through
          case 141: break;
          case 3:
            { 
            }
          // fall through
          case 142: break;
          case 4:
            { yybegin(COMMENT_STATE); return COMMENT;
            }
          // fall through
          case 143: break;
          case 5:
            { return IDENTIFIER;
            }
          // fall through
          case 144: break;
          case 6:
            { yybegin(AFTER_EOL_SUPPRESSOR); return LEFT_PAREN;
            }
          // fall through
          case 145: break;
          case 7:
            { return RIGHT_PAREN;
            }
          // fall through
          case 146: break;
          case 8:
            { yybegin(AFTER_EOL_SUPPRESSOR); return MUL;
            }
          // fall through
          case 147: break;
          case 9:
            { yybegin(AFTER_EOL_SUPPRESSOR); return ADD;
            }
          // fall through
          case 148: break;
          case 10:
            { yybegin(AFTER_EOL_SUPPRESSOR); return COMMA;
            }
          // fall through
          case 149: break;
          case 11:
            { yybegin(AFTER_EOL_SUPPRESSOR); return SUB;
            }
          // fall through
          case 150: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 151: break;
          case 13:
            { yybegin(AFTER_EOL_SUPPRESSOR); return DIV;
            }
          // fall through
          case 152: break;
          case 14:
            { yybegin(AFTER_EOL_SUPPRESSOR); return COLON;
            }
          // fall through
          case 153: break;
          case 15:
            { yybegin(AFTER_EOL_SUPPRESSOR); return SEMICOLON;
            }
          // fall through
          case 154: break;
          case 16:
            { yybegin(AFTER_EOL_SUPPRESSOR); return ASSIGN;
            }
          // fall through
          case 155: break;
          case 17:
            { yybegin(COMMENT_STATE); return PRE_ANNOTATION;
            }
          // fall through
          case 156: break;
          case 18:
            { yybegin(AFTER_EOL_SUPPRESSOR); return LEFT_BRACKET;
            }
          // fall through
          case 157: break;
          case 19:
            { return RIGHT_BRACKET;
            }
          // fall through
          case 158: break;
          case 20:
            { yybegin(AFTER_EOL_SUPPRESSOR); return LEFT_BRACE;
            }
          // fall through
          case 159: break;
          case 21:
            { return RIGHT_BRACE;
            }
          // fall through
          case 160: break;
          case 22:
            { yybegin(YYINITIAL); return END_OF_LINE;
            }
          // fall through
          case 161: break;
          case 23:
            { yybegin(YYINITIAL); yypushback(1);
            }
          // fall through
          case 162: break;
          case 24:
            { return COMMENT;
            }
          // fall through
          case 163: break;
          case 25:
            { return PRE_ANNOTATION;
            }
          // fall through
          case 164: break;
          case 26:
            { yybegin(AFTER_EOL_SUPPRESSOR); return ARROW;
            }
          // fall through
          case 165: break;
          case 27:
            { yybegin(COMMENT_STATE); return POST_ANNOTATION;
            }
          // fall through
          case 166: break;
          case 28:
            { return I8;
            }
          // fall through
          case 167: break;
          case 29:
            { return U8;
            }
          // fall through
          case 168: break;
          case 30:
            { return AT;
            }
          // fall through
          case 169: break;
          case 31:
            { return DO;
            }
          // fall through
          case 170: break;
          case 32:
            { return ID;
            }
          // fall through
          case 171: break;
          case 33:
            { return IF;
            }
          // fall through
          case 172: break;
          case 34:
            { return ON;
            }
          // fall through
          case 173: break;
          case 35:
            { return POST_ANNOTATION;
            }
          // fall through
          case 174: break;
          case 36:
            { return F32;
            }
          // fall through
          case 175: break;
          case 37:
            { return F64;
            }
          // fall through
          case 176: break;
          case 38:
            { return I16;
            }
          // fall through
          case 177: break;
          case 39:
            { return I32;
            }
          // fall through
          case 178: break;
          case 40:
            { return I64;
            }
          // fall through
          case 179: break;
          case 41:
            { return U16;
            }
          // fall through
          case 180: break;
          case 42:
            { return U32;
            }
          // fall through
          case 181: break;
          case 43:
            { return U64;
            }
          // fall through
          case 182: break;
          case 44:
            { return CPU;
            }
          // fall through
          case 183: break;
          case 45:
            { return GET;
            }
          // fall through
          case 184: break;
          case 46:
            { return LOW;
            }
          // fall through
          case 185: break;
          case 47:
            { return RED;
            }
          // fall through
          case 186: break;
          case 48:
            { return REF;
            }
          // fall through
          case 187: break;
          case 49:
            { return REG;
            }
          // fall through
          case 188: break;
          case 50:
            { return SET;
            }
          // fall through
          case 189: break;
          case 51:
            { return BASE;
            }
          // fall through
          case 190: break;
          case 52:
            { return BOOL;
            }
          // fall through
          case 191: break;
          case 53:
            { return DROP;
            }
          // fall through
          case 192: break;
          case 54:
            { return ELSE;
            }
          // fall through
          case 193: break;
          case 55:
            { return ENUM;
            }
          // fall through
          case 194: break;
          case 56:
            { return EXIT;
            }
          // fall through
          case 195: break;
          case 57:
            { return HIGH;
            }
          // fall through
          case 196: break;
          case 58:
            { return HOOK;
            }
          // fall through
          case 197: break;
          case 59:
            { return OMIT;
            }
          // fall through
          case 198: break;
          case 60:
            { return PORT;
            }
          // fall through
          case 199: break;
          case 61:
            { return RECV;
            }
          // fall through
          case 200: break;
          case 62:
            { return RESP;
            }
          // fall through
          case 201: break;
          case 63:
            { return SAVE;
            }
          // fall through
          case 202: break;
          case 64:
            { return SEND;
            }
          // fall through
          case 203: break;
          case 65:
            { return SIZE;
            }
          // fall through
          case 204: break;
          case 66:
            { return SYNC;
            }
          // fall through
          case 205: break;
          case 67:
            { return TEXT;
            }
          // fall through
          case 206: break;
          case 68:
            { return TIME;
            }
          // fall through
          case 207: break;
          case 69:
            { return TRUE;
            }
          // fall through
          case 208: break;
          case 70:
            { return TYPE;
            }
          // fall through
          case 209: break;
          case 71:
            { return WITH;
            }
          // fall through
          case 210: break;
          case 72:
            { return ARRAY;
            }
          // fall through
          case 211: break;
          case 73:
            { return ASYNC;
            }
          // fall through
          case 212: break;
          case 74:
            { return BLOCK;
            }
          // fall through
          case 213: break;
          case 75:
            { return ENTER;
            }
          // fall through
          case 214: break;
          case 76:
            { return ENTRY;
            }
          // fall through
          case 215: break;
          case 77:
            { return EVENT;
            }
          // fall through
          case 216: break;
          case 78:
            { return FALSE;
            }
          // fall through
          case 217: break;
          case 79:
            { return FATAL;
            }
          // fall through
          case 218: break;
          case 80:
            { return GROUP;
            }
          // fall through
          case 219: break;
          case 81:
            { return GUARD;
            }
          // fall through
          case 220: break;
          case 82:
            { return INPUT;
            }
          // fall through
          case 221: break;
          case 83:
            { return MATCH;
            }
          // fall through
          case 222: break;
          case 84:
            { return PARAM;
            }
          // fall through
          case 223: break;
          case 85:
            { return PHASE;
            }
          // fall through
          case 224: break;
          case 86:
            { return QUEUE;
            }
          // fall through
          case 225: break;
          case 87:
            { return STACK;
            }
          // fall through
          case 226: break;
          case 88:
            { return STATE;
            }
          // fall through
          case 227: break;
          case 89:
            { return ACTION;
            }
          // fall through
          case 228: break;
          case 90:
            { return ACTIVE;
            }
          // fall through
          case 229: break;
          case 91:
            { return ALWAYS;
            }
          // fall through
          case 230: break;
          case 92:
            { return ASSERT;
            }
          // fall through
          case 231: break;
          case 93:
            { return CHANGE;
            }
          // fall through
          case 232: break;
          case 94:
            { return CHOICE;
            }
          // fall through
          case 233: break;
          case 95:
            { return FORMAT;
            }
          // fall through
          case 234: break;
          case 96:
            { return HEALTH;
            }
          // fall through
          case 235: break;
          case 97:
            { return IMPORT;
            }
          // fall through
          case 236: break;
          case 98:
            { return LOCATE;
            }
          // fall through
          case 237: break;
          case 99:
            { return MODULE;
            }
          // fall through
          case 238: break;
          case 100:
            { return OPCODE;
            }
          // fall through
          case 239: break;
          case 101:
            { return ORANGE;
            }
          // fall through
          case 240: break;
          case 102:
            { return OUTPUT;
            }
          // fall through
          case 241: break;
          case 103:
            { return PACKET;
            }
          // fall through
          case 242: break;
          case 104:
            { return QUEUED;
            }
          // fall through
          case 243: break;
          case 105:
            { return RECORD;
            }
          // fall through
          case 244: break;
          case 106:
            { return SERIAL;
            }
          // fall through
          case 245: break;
          case 107:
            { return SIGNAL;
            }
          // fall through
          case 246: break;
          case 108:
            { return STRING;
            }
          // fall through
          case 247: break;
          case 109:
            { return STRUCT;
            }
          // fall through
          case 248: break;
          case 110:
            { return UPDATE;
            }
          // fall through
          case 249: break;
          case 111:
            { return YELLOW;
            }
          // fall through
          case 250: break;
          case 112:
            { return COMMAND;
            }
          // fall through
          case 251: break;
          case 113:
            { return DEFAULT;
            }
          // fall through
          case 252: break;
          case 114:
            { return GUARDED;
            }
          // fall through
          case 253: break;
          case 115:
            { return INCLUDE;
            }
          // fall through
          case 254: break;
          case 116:
            { return INITIAL;
            }
          // fall through
          case 255: break;
          case 117:
            { return MACHINE;
            }
          // fall through
          case 256: break;
          case 118:
            { return PACKETS;
            }
          // fall through
          case 257: break;
          case 119:
            { return PASSIVE;
            }
          // fall through
          case 258: break;
          case 120:
            { return PRIVATE;
            }
          // fall through
          case 259: break;
          case 121:
            { return PRODUCT;
            }
          // fall through
          case 260: break;
          case 122:
            { return REQUEST;
            }
          // fall through
          case 261: break;
          case 123:
            { return WARNING;
            }
          // fall through
          case 262: break;
          case 124:
            { return ACTIVITY;
            }
          // fall through
          case 263: break;
          case 125:
            { return CONSTANT;
            }
          // fall through
          case 264: break;
          case 126:
            { return EXTERNAL;
            }
          // fall through
          case 265: break;
          case 127:
            { return INSTANCE;
            }
          // fall through
          case 266: break;
          case 128:
            { return INTERNAL;
            }
          // fall through
          case 267: break;
          case 129:
            { return PRIORITY;
            }
          // fall through
          case 268: break;
          case 130:
            { return SEVERITY;
            }
          // fall through
          case 269: break;
          case 131:
            { return THROTTLE;
            }
          // fall through
          case 270: break;
          case 132:
            { return TOPOLOGY;
            }
          // fall through
          case 271: break;
          case 133:
            { return COMPONENT;
            }
          // fall through
          case 272: break;
          case 134:
            { return CONTAINER;
            }
          // fall through
          case 273: break;
          case 135:
            { return INTERFACE;
            }
          // fall through
          case 274: break;
          case 136:
            { return TELEMETRY;
            }
          // fall through
          case 275: break;
          case 137:
            { return UNMATCHED;
            }
          // fall through
          case 276: break;
          case 138:
            { return DIAGNOSTIC;
            }
          // fall through
          case 277: break;
          case 139:
            { return CONNECTIONS;
            }
          // fall through
          case 278: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
